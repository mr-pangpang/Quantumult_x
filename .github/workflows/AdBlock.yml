name: AdBlock
on:
  schedule:
    - cron: "0 0 * * 1"  # 每周一 UTC 0 点（北京时间 8 点）自动执行
  workflow_dispatch:  # 支持手动触发

jobs:
  download-and-save:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取当前仓库代码
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 安装Playwright及Chrome（适配Ubuntu 24.04）
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip libnss3 libxi6 libxrender1 libxss1 libasound2t64
          pip3 install playwright
          playwright install --with-deps
          echo "=== 已找到的浏览器可执行文件 ==="
          find /home/runner/.cache/ms-playwright/ -name "headless_shell" -o -name "chrome" 2>/dev/null

      - name: 用Playwright获取页面内容（适配规则特征）
        run: |
          cat > download.py << EOF
          from playwright.sync_api import sync_playwright
          import os
          import subprocess

          def find_chrome_path():
              for target in ["headless_shell", "chrome"]:
                  try:
                      result = subprocess.check_output(
                          ["find", "/home/runner/.cache/ms-playwright/", "-name", target],
                          stderr=subprocess.STDOUT
                      ).decode().strip()
                      if result:
                          return result.split("\n")[0]
                  except subprocess.CalledProcessError:
                      continue
              raise Exception("未找到Chrome/headless_shell！")

          with sync_playwright() as p:
              # 1. 启动Chrome并访问链接
              chrome_path = find_chrome_path()
              print(f"✅ 已找到Chrome路径：{chrome_path}")
              browser = p.chromium.launch(
                  headless=True,
                  args=["--no-sandbox", "--disable-dev-shm-usage"],
                  executable_path=chrome_path
              )
              page = browser.new_page(
                  user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
              )
              print("🔄 正在访问链接...")
              page.goto("https://whatshub.top/rule/AntiAD.list", timeout=30000)

              # 2. 保存页面内容（同时打印前200字符，方便调试内容）
              page_content = page.content()
              with open("AdBlock", "w", encoding="utf-8") as f:
                  f.write(page_content)
              browser.close()
              print("🔚 浏览器已关闭，开始验证文件...")
              print(f"📄 文件前200字符内容：{page_content[:200]}")  # 关键：打印内容片段，看实际获取到啥

              # 3. 宽松校验：只要包含"规则常见元素"就认为有效（适配更多规则格式）
              if not os.path.exists("AdBlock"):
                  raise Exception("❌ 失败：未生成AdBlock文件")
              file_size = os.path.getsize("AdBlock")
              if file_size < 100:
                  raise Exception(f"❌ 失败：文件过小（{file_size}字节），可能是错误页面")
              # 替换特征：用"#"（注释）、"."（域名）、"^"（规则结束符）中任意一个判断
              content_sample = page_content[:500]  # 读前500字符判断
              if not any(char in content_sample for char in ["#", ".", "^"]):
                  raise Exception("❌ 失败：文件内容无规则特征（无#/.^），可能是错误页面")

              print(f"✅ 成功！文件大小：{file_size} 字节（约 {file_size/1024:.2f} KB）")
          EOF
          python3 download.py

      # 后续仓库检查、克隆、推送步骤和之前一致（省略，直接用之前的代码即可）
      - name: 检查dpdisk/quantumult_x仓库是否存在
        id: check_repo
        run: |
          RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ secrets.PANGPANG }}" "https://api.github.com/repos/dpdisk/quantumult_x")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          echo "repo_exists=$([ "$HTTP_CODE" -eq 200 ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: 若仓库不存在则创建
        if: steps.check_repo.outputs.repo_exists == 'false'
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.PANGPANG }}" -H "Content-Type: application/json" -d '{"name":"quantumult_x","auto_init":false,"visibility":"public"}' "https://api.github.com/user/repos"

      - name: 克隆dpdisk/quantumult_x仓库
        run: |
          git clone -b main --single-branch https://${{ secrets.PANGPANG }}@github.com/dpdisk/quantumult_x.git target-repo || (mkdir -p target-repo && cd target-repo && git init && git remote add origin https://${{ secrets.PANGPANG }}@github.com/dpdisk/quantumult_x.git && git checkout -b main)

      - name: 移动文件到目标仓库根目录
        run: |
          mkdir -p target-repo/filter
          mv AdBlock target-repo/filter/
          echo "文件已移动到：target-repo/filter/AdBlock"

      - name: 提交并推送dpdisk仓库变更
        run: |
          cd target-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add filter/AdBlock
          CURRENT_TIME=$(date -d "+8 hours" +'%Y-%m-%d %H:%M:%S')
          git commit -m "updatetime $CURRENT_TIME" || echo "无文件变更，无需提交"
          git push https://${{ secrets.PANGPANG }}@github.com/dpdisk/quantumult_x.git HEAD:main
