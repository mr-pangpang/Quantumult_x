name: AdBlock
on:
  schedule:
    - cron: "0 0 * * 1"  # 每周一 UTC 0 点（北京时间 8 点）自动执行
  workflow_dispatch:  # 支持手动触发

jobs:
  download-and-save:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取当前仓库代码
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 安装Playwright及无头Chrome（模拟浏览器依赖）
        run: |
          # 更新系统依赖 + 安装Python环境（Playwright基于Python）
          sudo apt-get update && sudo apt-get install -y python3-pip
          # 安装Playwright库 + 下载无头Chrome（无需界面，适配服务器环境）
          pip3 install playwright
          playwright install chrome

      - name: 用Playwright模拟浏览器下载AdBlock（绕过严格拦截）
        run: |
          # 编写Python脚本：启动无头Chrome → 打开链接 → 监听下载 → 保存文件
          cat > download.py << EOF
          from playwright.sync_api import sync_playwright
          import os

          with sync_playwright() as p:
              # 启动无头Chrome，添加--no-sandbox适配服务器环境
              browser = p.chromium.launch(
                  headless=True,
                  args=["--no-sandbox"],
                  user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
              )
              page = browser.new_page()
              # 监听文件下载事件，等待下载完成
              with page.expect_download() as download_info:
                  page.goto("https://whatshub.top/rule/AntiAD.list")  # 打开下载链接
              download = download_info.value
              download.save_as("AdBlock")  # 保存文件到当前目录（命名为AdBlock）
              browser.close()

              # 验证下载结果（若文件不存在，直接报错终止工作流）
              if not os.path.exists("AdBlock"):
                  raise Exception("文件下载失败！未找到AdBlock文件")
              file_size = os.path.getsize("AdBlock")
              if file_size == 0:
                  raise Exception(f"下载的文件为空！文件大小：{file_size} 字节")
              print(f"下载成功！文件大小：{file_size} 字节（约 {file_size/1024:.2f} KB）")
          EOF
          # 执行下载脚本
          python3 download.py

      - name: 检查dpdisk/quantumult_x仓库是否存在
        id: check_repo
        run: |
          RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ secrets.PANGPANG }}" "https://api.github.com/repos/dpdisk/quantumult_x")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          echo "repo_exists=$([ "$HTTP_CODE" -eq 200 ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: 若仓库不存在则创建
        if: steps.check_repo.outputs.repo_exists == 'false'
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.PANGPANG }}" -H "Content-Type: application/json" -d '{"name":"quantumult_x","auto_init":false,"visibility":"public"}' "https://api.github.com/user/repos"

      - name: 克隆dpdisk/quantumult_x仓库
        run: |
          git clone -b main --single-branch https://${{ secrets.PANGPANG }}@github.com/dpdisk/quantumult_x.git target-repo || (mkdir -p target-repo && cd target-repo && git init && git remote add origin https://${{ secrets.PANGPANG }}@github.com/dpdisk/quantumult_x.git && git checkout -b main)

      - name: 移动文件到目标仓库根目录
        run: |
          mkdir -p target-repo/filter
          mv AdBlock target-repo/filter/
          echo "文件已移动到：target-repo/filter/AdBlock"

      - name: 提交并推送dpdisk仓库变更
        run: |
          cd target-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add filter/AdBlock
          CURRENT_TIME=$(date -d "+8 hours" +'%Y-%m-%d %H:%M:%S')  # 用北京时间作为提交时间
          git commit -m "updatetime $CURRENT_TIME" || echo "无文件变更，无需提交"
          git push https://${{ secrets.PANGPANG }}@github.com/dpdisk/quantumult_x.git HEAD:main
