# 只修改“用Playwright获取页面内容”步骤，其他步骤和方案A一致
- name: 用Playwright获取页面内容（保存完整内容用于调试）
  run: |
    cat > download.py << EOF
    from playwright.sync_api import sync_playwright
    import os
    import subprocess

    def find_chrome_path():
        for target in ["headless_shell", "chrome"]:
            try:
                result = subprocess.check_output(
                    ["find", "/home/runner/.cache/ms-playwright/", "-name", target],
                    stderr=subprocess.STDOUT
                ).decode().strip()
                if result:
                    return result.split("\n")[0]
            except subprocess.CalledProcessError:
                continue
        raise Exception("未找到Chrome/headless_shell！")

    with sync_playwright() as p:
        chrome_path = find_chrome_path()
        print(f"✅ 已找到Chrome路径：{chrome_path}")
        browser = p.chromium.launch(
            headless=True,
            args=["--no-sandbox", "--disable-dev-shm-usage"],
            executable_path=chrome_path
        )
        page = browser.new_page(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
        )
        print("🔄 正在访问链接...")
        page.goto("https://whatshub.top/rule/AntiAD.list", timeout=30000)

        # 1. 保存完整内容（不管是否有效，先保存下来）
        page_content = page.content()
        with open("AdBlock", "w", encoding="utf-8") as f:
            f.write(page_content)
        # 2. 额外保存“内容快照”到当前仓库（方便在GitHub查看实际内容）
        with open("content_snapshot.txt", "w", encoding="utf-8") as f:
            f.write(f"文件大小：{len(page_content)} 字节\n")
            f.write(f"前500字符：\n{page_content[:500]}\n")
            f.write(f"完整内容：\n{page_content}")
        
        browser.close()
        print("🔚 已保存内容快照（content_snapshot.txt），可在GitHub仓库查看")

        # 3. 简单校验（只看大小，不拦内容，先确保内容能保存）
        if os.path.getsize("AdBlock") < 100:
            raise Exception(f"❌ 失败：文件过小（{os.path.getsize('AdBlock')}字节）")
        print(f"✅ 内容已保存！文件大小：{os.path.getsize('AdBlock')} 字节")
    EOF
    python3 download.py

# 新增步骤：把内容快照推到当前仓库（方便你查看）
- name: 推送内容快照到当前仓库（用于调试）
  run: |
    git config --global user.name "GitHub Actions"
    git config --global user.email "actions@github.com"
    git add content_snapshot.txt
    git commit -m "add content snapshot for debug" || echo "无新快照需要提交"
    git push origin HEAD
